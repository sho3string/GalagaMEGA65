#!/usr/bin/env python3
import os
import sys
import zipfile
import tempfile
import shutil
import hashlib

EXPECTED_FILES = [
    "51xx.bin", "54xx.bin", "2600j.bin", "2700k.bin", "2800l.bin",
    "3200a.bin", "3300b.bin", "3400c.bin", "3500d.bin", "3600e.bin",
    "3700g.bin", "prom-1.1d", "prom-2.5c", "prom-3.1c", "prom-4.2n", "prom-5.5n"
]

EXPECTED_CHECKSUMS = {
    "2600j.bin": "5e68d9567938d80ebba91168f511b1952dba19658a841b73811c947fd6649f98",
    "2700k.bin": "e8a614ace39650e743d2a4c4641c751eb958276215e2d68983c90a6cbc50fe47",
    "2800l.bin": "550119a20c3d9240bccefb6a0af2c3d00d3748dad7596bc8bab3c641126a53b7",
    "3200a.bin": "701e8d65e1edc6d12f56e4f306463ad95384d1f959add83cbefca45d2e7646df",
    "3300b.bin": "43ea28a9664c25449d8e3776bf902bd8a3e61754b330a88284c497934ab7b673",
    "3400c.bin": "8d2727defa3a7d7953d79992ba77fb53010acc13a37fe410b7652cbf77167392",
    "3500d.bin": "b98e7bc91af65391b481055f1c5a80ffe79c1093aadd78883baf443ecf2d6b2b",
    "3600e.bin": "fba08538baa7ffc74d1441f1d0c666619a2020899d11eaee360551fea58eb3e8",
    "3700g.bin": "28ea2804941a6d5d5c5f95ded739f3c65293471bfb2b7cbebe0b68a45936fda1",
    "51xx.bin": "bd1c1fddde888550611fdb4ae29bc06d8ac2d2c6a2771ebbff243ec109caf26e",
    "54xx.bin": "85c8570b91342ab729bd775c500a3e7245d655a0bab2fed6356e37ea388848e8",
    "prom-1.1d": "079f5fd72fc52bfa9354927ecea9aaba240b1527f1a5951ee15975286b166b3b",
    "prom-2.5c": "8c34002652e587aa19a77bff9040d870af18b4b2fe5c5f0ed962899386e0e751",
    "prom-3.1c": "a3e80d099f7bcbfdd9a64239bda2e5e916c696d5dfb9294053bae57c46e184b1",
    "prom-4.2n": "6534ac170c6a8b0f567179bb4f24d4ab8337e3561e5f229a7bd9b128d29fed4f",
    "prom-5.5n": "5c2d0637794badb9a214324da3fd9ebbcd282a5c0f3a778fe6219fdba1c3b91a"
}

def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def verify_checksums(temp_path):
    for file in EXPECTED_FILES:
        file_path = os.path.join(temp_path, file)
        calculated_checksum = calculate_sha256(file_path)
        expected_checksum = EXPECTED_CHECKSUMS[file]
        if calculated_checksum != expected_checksum:
            print(f"Error: Checksum mismatch for {file}")
            print(f"Expected: {expected_checksum}")
            print(f"Calculated: {calculated_checksum}")
            sys.exit(1)

def main():
    print("Galaga for MEGA65: ROM Installer")
    print("================================\n")
    if len(sys.argv) != 3:
        print("The Galaga core expects the files generated by this script located in the folder /arcade/galaga on your SD card.")
        print("Download this ZIP file: https://wowroms.com/en/roms/mame-0.139u1/galaga-midway-set-1/3707.html")
        print("Or search the web for: mame galaga midway set 1\n")
        print("Usage: script.py <path to the zip file> <output_folder>")
        sys.exit(1)

    rom_zip_path = sys.argv[1]
    output_folder = sys.argv[2]

    if not os.path.exists(output_folder):
        print(f"Creating output folder: {output_folder}")
        os.makedirs(output_folder)

    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"Extracting files to temporary directory: {temp_dir}")
        try:
            with zipfile.ZipFile(rom_zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
                missing_files = [f for f in EXPECTED_FILES if not os.path.isfile(os.path.join(temp_dir, f))]
                if missing_files:
                    print(f"Error: Missing files in the provided zip file: {', '.join(missing_files)}")
                    sys.exit(1)

                print("Verifying checksums...")
                verify_checksums(temp_dir)

                print("Merging files and copying to output folder...")
                with open(os.path.join(output_folder, "rom1.rom"), "wb") as rom1:
                    for part in ["3200a.bin", "3300b.bin", "3400c.bin", "3500d.bin"]:
                        print(f"Appending {part} to rom1.rom")
                        with open(os.path.join(temp_dir, part), "rb") as f:
                            rom1.write(f.read())

                with open(os.path.join(output_folder, "gfx1.rom"), "wb") as gfx1:
                    for part in ["2600j.bin", "2600j.bin"]:
                        print(f"Appending {part} to gfx1.rom")
                        with open(os.path.join(temp_dir, part), "rb") as f:
                            gfx1.write(f.read())

                with open(os.path.join(output_folder, "gfx2.rom"), "wb") as gfx2:
                    for part in ["2800l.bin", "2700k.bin"]:
                        print(f"Appending {part} to gfx2.rom")
                        with open(os.path.join(temp_dir, part), "rb") as f:
                            gfx2.write(f.read())

                for filename in ["51xx.bin", "54xx.bin",
                                 "prom-1.1d", "prom-2.5c", "prom-3.1c", "prom-4.2n", "prom-5.5n"]:
                    print(f"Copying {filename} to output folder")
                    shutil.copy(os.path.join(temp_dir, filename), output_folder)

                print("Files extracted and merged successfully.")
                print("Cleaning up temporary files...")

        except FileNotFoundError:
            print(f"Error: ZIP file not found: {rom_zip_path}")
            sys.exit(1)
        except zipfile.BadZipFile:
            print(f"Error: Invalid or corrupted ZIP file: {rom_zip_path}")
            sys.exit(1)

if __name__ == "__main__":
    main()
